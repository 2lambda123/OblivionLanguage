0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish', './' ]
2 info using npm@3.8.9
3 info using node@v6.2.0
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec Result {
7 silly cache add   raw: './',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/Users/Josh/WebstormProjects/Oblivion',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/Josh/.npm/oblivion/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/Josh/.npm correctMkdir not in flight; initializing
10 info lifecycle oblivion@1.0.0~prepublish: oblivion@1.0.0
11 silly lifecycle oblivion@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/Josh/.npm/oblivion/1.0.0/package.tgz',
12 verbose tar pack   '/Users/Josh/WebstormProjects/Oblivion' ]
13 verbose tarball /Users/Josh/.npm/oblivion/1.0.0/package.tgz
14 verbose folder /Users/Josh/WebstormProjects/Oblivion
15 verbose addLocalTarball adding from inside cache /Users/Josh/.npm/oblivion/1.0.0/package.tgz
16 verbose correctMkdir /Users/Josh/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd oblivion@1.0.0
18 verbose afterAdd /Users/Josh/.npm/oblivion/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/Josh/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/Josh/.npm/oblivion/1.0.0/package/package.json written
21 silly publish { name: 'oblivion',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'The language of art and creation',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   preferGlobal: true,
21 silly publish   bin: { oblivion: 'index.js' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/jweinst1/Oblivion.git' },
21 silly publish   keywords:
21 silly publish    [ 'compiler',
21 silly publish      'art',
21 silly publish      'creation',
21 silly publish      'creative',
21 silly publish      'programming',
21 silly publish      'languages' ],
21 silly publish   author:
21 silly publish    { name: 'Joshua Weinstein',
21 silly publish      email: 'jweinst1@berkeley.edu',
21 silly publish      url: 'https://github.com/jweinst1' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/jweinst1/Oblivion/issues' },
21 silly publish   homepage: 'https://github.com/jweinst1/Oblivion#readme',
21 silly publish   readme: '# Oblivion\n\n\nThe language of art and graphics!\n\nOblivion is a programming language that produces SVG files. It\'s a domain specific language dedicated to producing graphics and\ngiving programmers as well as artists the tools to create art with code.\n\n It\'s a language designed to visualize code and create incredible illustrations!\n\n#### `Features:`\n* SVG-specific data structures and operators\n* Simple, Ruby/Python like syntax\n* Runs in the browser, or in NodeJS\n* Recursion and functional programming support\n* Immutable Python-style lists\n\n`Oblivion` is the perfect programming language for artists, researchers, programmers, and anyone who wants to use a functional approach to visualize their code.\n\nTry out Oblivion on the playground, or read the guide to see how it all works!\n\n## `Language Guide`:\n\n## Output\n\nOblivion is a programming language that outputs a string representing an svg format graphic. This is called the `SVGOut`. We can think of this output as a buffer. Similarly, the language can aslo "print" statements to another output called `StdOut`. Both of these are accessed with the `draw` keyword and `print()` function respectively.\n\n### WhiteSpace\n\nIn Oblivon, newlines, spaces, tabs and commas are treated as whitespace. This means you can put as many commas, spaces or newlines as you like, to allow for a customized spacing of code.\n\n```\n\nprint(3, 4)\nprint(3,,,,,,,,,\n,,,,,,,,,,,,4)\n\n3\n4\n3\n```\n\n## Types\n\nOblivion has a relatively small number of types, allowing for a small variety of data to yield many combinations of uses and functionality.\n\n### Numbers\n\nNumbers in Oblivion represent both Integers and Floats. They are very similar to JavaScript numbers.\n\n```\nprint(7 /6)\nprint(4 + 6)\n\n1.1666666666666667\n10\n```\n\n### Bools\n\nBools or booleans represent true and false in Oblivion. They are the results of using logical operators.\n\n### Lists\n\nLists are a special type in Oblivion and are denoted with square brackets `[]`. They can contain any value, and are not statically typed. They are also immutable, you can only use operators to create new lists, you can never edit a list once it\'s created.\n\n```\nprint([1,2,3])\nprint([1 2 3])\ng = [1] & [2, 3]\nprint(g)\nprint(g & [2, 3 + 3])\n\n[1,2,3]\n[1,2,3]\n[1,2,3]\n[1,2,3,2,6]\n```\n\n### Points\n\nPoints are two member structs that contain two numbers, one that applies to the x and y coordinate of a point on a grid. SVG graphics are always arranged on a x-y grid system, thus points are an easy way to manage places on a grid.\n\nYou can access the x and y properties of a point, but points are always immutable\n\n```\nf = (3, 2)\nprint(f.x)\n\n3\n```\n\n### Lines\n\nIn Oblivion, a line is a data structure that represent a series of points connected by a line. It is immutable, like the rest of Oblivon\'s types. A line has both a printable form and a drawable form. They are connected via the `->` operator.\n\n```\ng = (1,8) -> (44, 9) -> (44,44)\n print(g)\ng = #red |= g\ndraw g\n\n1,8 -> 44,9 -> 44,44\n```\n\nThis gives the SVG\n\n```xml\n<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg">\n<style></style>\n<polyline points="1,8 44,9 44,44" fill="transparent" stroke="red" stroke-width="1"></polyline>\n</svg>\n```\n\n\n### Shapes\n\nShapes, also called polygons, are very similar to lines, but they are always `filled`. This means that the shape is always colored. Shapes are connected via the `*>` operator.\n\n```\ng = (1,8) *> (44, 9) *> (44,44) *> (0, 90)\n print(g)\ng = #tan |= g\ndraw g\n\n1,8 *> 44,9 *> 44,44 *> 0,90\n```\n\n```xml\n<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg">\n<style></style>\n<polygon points="1,8 44,9 44,44 0,90" fill="tan" stroke="transparent" stroke-width="1"></polygon>\n</svg>\n```\n\n### Colors\n\nColors are special types in Oblivion that allow you to color your lines and shapes. For now, you can use a small range of named colors, like `red` or `orange`, or a hex color, such as `#fff`.\n\n## Operators\n\nUnlike most functional languages, Oblivion uses a wide array of operators (*and a minimal amount of parenthsis*).\n\n### Left Associativity\n\nIt is important to note all operators in Oblivion associate toward the left. There is no other operator precedence.\n\n### Arithmetic Operators\n\nOblivion has five arithmetic operators, `+, -, *, /, %`. They are used like so:\n\n```\nprint(3 + 3)\nprint(44 / 5 - 4)\nprint(6 % 2)\n\n6\n44\n0\n```\n\n#### Random Number Operator\n\nThe `!!` operator returns a random number between the left and right numbers argued with it respectively. Such as `3 !! 10`.\n\n### Logical Operators\n\nOblivion makes use of several different logical operators. These can be used to compare values, and check if values are the same.\n\n```\nprint(3 == 4)\nprint([4] ~= [4])\nprint(true == 3 == 3)\nprint(3 != 4)\nprint(5 <= 5 + 7 - 3 * 4)\n\nfalse\ntrue\ntrue\ntrue\n```\n\nThe `~=` checks for absolute equality, and can compare lists against each other. The `==` operator will not work properly for lists.\n\n### List Operators\n\nOblivion has two operators specifically for lists! The first is the extension operator, `&`. It returns a new list that is extended by the right hand list or other element. If the right side is not a list, it acts as an appending operator.\n\nSecond is the set, `=>` operator. It allows you to reference an index of a list and returns a new copy of the list that gets reassigned.\n\n```\na = [1, 2, 3]\nprint(a & [4])\nprint(a.1 => [3])\n\n[1,2,3,4]\n[1,[3],3,4]\n```\n\n### Color Operator\n\nThe `|=` operator takes one color and a line shape or combo and colors it.\n\n## If-Else Statements\n\nOblivions only conditional element is the if statement. It\'s constructed similarly to Ruby\'s if..else syntax. Like with all body statements, if statements end with a _, and can be nested.\n\n```\nd = (3,4) -> (5,6)\ne = (3,4) -> (5,6)\nif d ~= e\n    print(true)\nelse\n   print(false)\n_\n\ntrue\n```\n\nThey can also be used with the `draw` keyword\n\n```\ng = (88, 1) *> (5, 5)\n\nif 3 == 3\n   draw (30, 30) *> g\n_\n\nif 3 == 4\n   draw (30, 30) *> g\nelse\n    draw #green |= (60, 30) *> g\n_\n```\n\n```xml\n<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg">\n<style></style>\n<polygon points="30,30 88,1 5,5" fill="black" stroke="transparent" stroke-width="1"></polygon>\n<polygon points="60,30 88,1 5,5" fill="green" stroke="transparent" stroke-width="1"></polygon>\n</svg>\n\n```\n\n## Functions\n\nFunctions are the central feature in Oblivion used for computation. They work much like functions in languages like Ruby and Python. They even use the all so familiar `def` keyword!\n\n```\ndef fact(i)\n   if i == 0\n      return i\n   else\n      return i + fact(i - 1)\n   _\n_\n\nprint(fact(8))\n\n36\n```\n\nFunctions can also be used with drawing!\n\n```\ndef diagonal(n)\n     if n == 0\n         return (0, 0)\n     else\n        return (n, n) -> diagonal(n - 1)\n    _\n_\n\ndraw diagonal(99)\n```\n\n```xml\n\n<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg">\n<style></style>\n<polyline points="99,99 98,98 97,97 96,96 95,95 94,94 93,93 92,92 91,91 90,90 89,89 88,88 87,87 86,86 85,85 84,84 83,83 82,82 81,81 80,80 79,79 78,78 77,77 76,76 75,75 74,74 73,73 72,72 71,71 70,70 69,69 68,68 67,67 66,66 65,65 64,64 63,63 62,62 61,61 60,60 59,59 58,58 57,57 56,56 55,55 54,54 53,53 52,52 51,51 50,50 49,49 48,48 47,47 46,46 45,45 44,44 43,43 42,42 41,41 40,40 39,39 38,38 37,37 36,36 35,35 34,34 33,33 32,32 31,31 30,30 29,29 28,28 27,27 26,26 25,25 24,24 23,23 22,22 21,21 20,20 19,19 18,18 17,17 16,16 15,15 14,14 13,13 12,12 11,11 10,10 9,9 8,8 7,7 6,6 5,5 4,4 3,3 2,2 1,1 0,0" fill="transparent" stroke="black" stroke-width="1"></polyline>\n</svg>\n```\n\nBecause Oblivion uses trampoline recursion, the limit for a recursive call is much deeper than with most other languages.\n\n## Processes\n\nA Process in oblivion is a no parameter function denoted by `{}`. It\'s meant to serve as a currying tool to aid in functional programming. It\'s also very useful for drawing.\n\n```\nf = [1]\nf = f.0 => {return [2]}\nprint(f.0())\n\n[2]\n```\n\nYou can also use processes with the `repeat` built-in function\n\n```\nf = [1]\nf = f.0 => {print(3)}\nrepeat(4, f.0)\n\n3\n3\n3\n3\n```\n\n## List Functions\n\nOblivion also has a variety of built in List functions that can slice, search, and insert items into a newly returned list.\n\n```\nprint(range(8))\nprint(insert(range(7), 3, 88))\nprint(find(range(5), 77))\nprint(len(range(8)))\n\nprint(slice([1, 2, 3, 4], 2))\n\n[0,1,2,3,4,5,6,7]\n[0,1,2,88,3,4,5,6]\nfalse\n[3,4]\n8\n```\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'fee71fa9af8e352a2b2d042c58162f375d1c9e04',
21 silly publish   _id: 'oblivion@1.0.0',
21 silly publish   _shasum: 'ff526e106d1e8151f209dc032f670c7e56d2a55e',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name oblivion
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'oblivion',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'oblivion',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/oblivion
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/Josh/.npm/oblivion/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/oblivion
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 4:00:25 PM
33 verbose request using bearer token for auth
34 verbose request id 3d99c41de7ee758f
35 http request PUT https://registry.npmjs.org/oblivion
36 http 403 https://registry.npmjs.org/oblivion
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '102',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Fri, 17 Mar 2017 23:00:26 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sjc3649-SJC',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1489791625.829369,VS0,VE215',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/Josh/.npm/registry.npmjs.org/oblivion on PUT
39 error publish Failed PUT 403
40 verbose stack Error: you do not have permission to publish "oblivion". Are you logged in as the correct user? : oblivion
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
41 verbose statusCode 403
42 verbose pkgid oblivion
43 verbose cwd /Users/Josh/WebstormProjects/Oblivion
44 error Darwin 16.0.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish" "./"
46 error node v6.2.0
47 error npm  v3.8.9
48 error code E403
49 error you do not have permission to publish "oblivion". Are you logged in as the correct user? : oblivion
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
